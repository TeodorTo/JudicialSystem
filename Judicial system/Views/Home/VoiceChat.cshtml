@{
Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Voice Chat Room</title>
</head>
<body>
<h2>Group Voice Chat</h2>
<button id="joinBtn">Join Call</button>

<audio id="remoteAudio" autoplay></audio>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/callHub")
        .build();

    const peerConnections = {}; // store peers by connection ID
    const roomName = "MainRoom";
    let localStream = null;

    connection.on("UserJoined", async (connectionId) => {
        console.log("User joined:", connectionId);
        const pc = createPeer(connectionId);
        peerConnections[connectionId] = pc;

        localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);

        await connection.invoke("SendSignalToRoom", connectionId, JSON.stringify({ offer }));
    });

    connection.on("UserLeft", (connectionId) => {
        console.log("User left:", connectionId);
        if (peerConnections[connectionId]) {
            peerConnections[connectionId].close();
            delete peerConnections[connectionId];
        }
    });

    connection.on("ReceiveSignal", async (fromId, data) => {
        const signal = JSON.parse(data);
        let pc = peerConnections[fromId];

        if (!pc) {
            pc = createPeer(fromId);
            peerConnections[fromId] = pc;
        }

        if (signal.offer) {
            await pc.setRemoteDescription(new RTCSessionDescription(signal.offer));
            localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

            const answer = await pc.createAnswer();
            await pc.setLocalDescription(answer);
            await connection.invoke("SendSignalToRoom", fromId, JSON.stringify({ answer }));
        } else if (signal.answer) {
            await pc.setRemoteDescription(new RTCSessionDescription(signal.answer));
        } else if (signal.candidate) {
            await pc.addIceCandidate(new RTCIceCandidate(signal.candidate));
        }
    });

    function createPeer(id) {
        const pc = new RTCPeerConnection({
            iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
        });

        pc.onicecandidate = e => {
            if (e.candidate) {
                connection.invoke("SendSignalToRoom", id, JSON.stringify({ candidate: e.candidate }));
            }
        };

        pc.ontrack = e => {
            document.getElementById("remoteAudio").srcObject = e.streams[0];
        };

        return pc;
    }

    document.getElementById("joinBtn").onclick = async () => {
        localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
        await connection.start();
        await connection.invoke("JoinRoom", roomName);
        console.log("Joined room:", roomName);
    };
</script>
</body>
</html>
